package com.example.tsb.services;

import com.example.tsb.configs.EmailSender;
import com.example.tsb.models.Appointment;
import com.example.tsb.models.Schedule;
import com.example.tsb.repositories.AppointmentRepository;
import com.example.tsb.repositories.ScheduleRepository;
import com.example.tsb.repositories.ServiceRepository;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;

@Service
@AllArgsConstructor
@Slf4j
public class AppointmentService {
    private final AppointmentRepository appointmentRepository;

    private final ServiceRepository serviceRepository;

    private final EmailSender emailSender;
    private final ScheduleRepository scheduleRepository;

    public void sendEmail(Appointment appointment){
        List<String> months= Arrays.asList("—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è",
                "–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞",
                "—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è");

        String text=String.format("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, %s!ü™Ñ\n\n", appointment.getName().split(" ")[0]);
        text+=String.format("–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ %d %s –≤ %s\n\n",
                appointment.getSchedule().getDate().getDayOfMonth(), months.get(appointment.getSchedule().getDate().getMonthValue()-1),
                appointment.getSchedule().getDate().toLocalTime());
        text+="–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: \n" +
                "\n\n";
        text+="–î–æ –≤—Å—Ç—Ä–µ—á–∏ \uD83E\uDE90\n\n";
        text+="–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\nInst: artem.vlastyuk\ntg: artemvlastyuk";
        if(appointment.isPermissionToSendEmail()){
            emailSender.sendMessage(appointment.getEmail(),text,"–ó–∞–ø–∏—Å—å");
        }
        text="–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n\n" +
                "–§–∏–æ:"+appointment.getName()+
                "\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: "+
                appointment.getSchedule().getDate().toLocalDate()+" "+appointment.getSchedule().getDate().toLocalTime()+
                "\nInst: "+appointment.getInst()+
                "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "+appointment.getPhoneNumber()+
                "\n–£—Å–ª—É–≥–∞: "+appointment.getService().getName()+
                "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "+appointment.getComment();
        emailSender.sendMessage("cvlastyuk@mail.ru",text,"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å");
    }
    public Long setAppointment(String email, String inst, String name, String phone,
                                  Long scheduleId, String comment, Long serviceId, boolean send_email){
        Schedule schedule=scheduleRepository.getReferenceById(scheduleId);
        if(schedule!=null){
            if(schedule.isBooked()){
                return -1L;
            }
            else {
                schedule.setBooked(true);
                scheduleRepository.save(schedule);
            }
        }
        else {
            return -1L;
        }
        com.example.tsb.models.Service service=serviceRepository.getReferenceById(serviceId);
        if(service==null){
            return -1L;
        }
        Appointment appointment=new Appointment(name, email, inst, service,phone,schedule,comment, send_email);
        Appointment appointment1=appointmentRepository.save(appointment);
        log.info("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: "+ appointment1);

        sendEmail(appointment);

        return appointment1.getId();
    }

    public List<Appointment> getAll() {
        return appointmentRepository.findAll();
    }
    public Appointment getById(Long id) {
        return appointmentRepository.getReferenceById(id);
    }

    public void delete(long id) {
        Appointment appointment=appointmentRepository.findById(id);
        if(appointment!=null){
            appointment.getSchedule().setBooked(false);
        }
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: " + appointment);

        appointmentRepository.deleteById(id);
    }
}
